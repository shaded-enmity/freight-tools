.TH freight-builder "1" "Apr 2015" "Neil Horman"
.SH NAME
freight-builder \- utility to convert manifest files into systemd-nspawn images 
.SH SYNOPSIS
\fBfrieght-builder [options]
.SH DESCRIPTION
.B freight-builder 
is a utility to convert manifest files of rpms into disk images suitable for use
with systemd-nspawn.  These disk images also create meta data useful for image
validation and adminstrative operation, such as determination of the need for
rebuilding due to updated packages.  Freight-builder accepts as input a manifest
file (described below), and produces a source and binary rpm as output.  The
former is suitable for rebuilding on alternate arches, while the latter (and any
rebuilds of the source rpm) can be placed in a repository for installations on
systems running freight-agent, and are usable as systemd containers.

.SH OPTIONS
.TP
\fB freight-builder [OPTIONS] 
.TP
.B -h | --help
Display options and usage for the utility
.TP
.B -k | --keep
Keep working files around for insepction/debug after exit
.TP
.B -s | --source
Only build the soruce rpm, not the binary container rpm
.TP
.B -m | --manifest <manifest file>
Specify the manifest file to convert into a container image
.TP
.B -o | --output path/to/output/dir
Write the resultant source and binary rpms to this directory
.TP
.B -c | --container <path/to/container/rpm>
Instead of building an rpm, introspect an rpm to see if any packages need
updates within the container
.TP
.B -v | --verbose
Make freight-builder output lots of diagnostic information
.TP.
.B -w | --workdir
Specify the base directory in which freight-builder uses as working space to
build rpms

.SH MANIFEST FILE FORMAT 
The Manifest file codifies the contents of a container image and generally has
this format:

.nf
---------------------------------------------
# These are comments

inherit = "/path/to/inherited/file";

repositories = (
	{
		name = "Yum_respository_1";
		url = "http://yum.repo.com/path/to/repo";
	}, ...
);


manifest = (
	"rpm1-version-release",
	"rpm2-version-release",
	...
);


packaging = {
	name = "web-server";
	version = "1.0";
	release = "1";
	summary = "Summarize This container here";
	license = "GPLv2|BSD|Proprietary";	
	author = "Name <email>";
	post_script ="/path/to/script";
};

yum_opts = {
	releasever = "f21";
};

container_opts = {
	user = "username";
};

----------------------------------------------
.fi

.B inherit="/path/to/inherited/file";
.PP
Manifest files can be stacked on one another.  The inherit directive indicates
the parent of the manifest file being processed.  Inheritance may be nested
(i.e. manifest A may inherit from manifest B, and B may inherit from manifest
C).  However multiple inheritance is not allowed.  Inherited files have their
repository and manifest groups merged.  The options group is overridden by child
option groups

.B repositories = ( ... )
.PP
The repositories group represents the set of yum repositories that this utility
will search for the manifest designated rpms.

.B manifest = ( ... )
.PP
A list of Strings representing package nvr's to include in the systemd-nspawn
image file.  

.B packaging 
.PP
A list of details to include when the container is packaged up as an rpm

.B post_script
.PP
Path to a file to be executed in the container root after the install is
complete.  Note that the script is run in a chroot so external files will not be
accessible

.B yum_opts
.PP
A list of config specifications to pass to yum:
.PP
.B releasever
This allows yum to specify the rpmdb release version when creating a container
for updates.  yum repositories with $releasever in their urls will be resolved
properly with this option

.B container_opts
.PP
A list of options to direct behavior of an instance of the container when
executed
.PP
.B user
The container will run as the specified user
